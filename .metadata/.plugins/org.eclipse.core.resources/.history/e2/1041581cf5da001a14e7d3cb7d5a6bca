package org.unibl.etf.attacks;

import java.util.Arrays;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

public class SQLInjectionAttack {

	
	private static boolean flag = false;
	private static Pattern pattern = Pattern.compile(CheckRequest.SQLI_KEYWORDS);
	
	public static boolean checkForSQLInjection(HttpServletRequest request) {
		flag = false;
		checkSession(request);
		checkParameterNames(request);
		checkQueryString(request);
		checkURL(request);
		return flag;
	}
	
	private static void checkSession(HttpServletRequest request) {
		HttpSession session = request.getSession();
		if(session != null) {
			request.getSession().getAttributeNames().asIterator().forEachRemaining(a -> {
				if(request.getSession().getAttribute(a) != null && request.getSession().getAttribute(a) instanceof String) {
					//System.out.println("XSS -> a : "+a);
					String username = request.getSession().getAttribute(a).toString();
					Pattern pattern = Pattern.compile("(?i)(?s)\\b(select)\\b(.*?)\\b(from)\\b|\\b(insert)\\b(.*?)\\b(into)\\b|\\b(update)\\b(.*?)\\b(set)\\b|\\b(group by)\\b|\\b(delete)(.*?)\\b(from)\\b");		
					
					Matcher matcher = pattern.matcher(username);
					if(matcher.find()) {
						flag = true;
						//System.out.println("XSS NAPAD: "+ a);
						LoggerAttacks.getLogger().log(Level.WARNING, "SQL injection attack in session: "+ username + "from address: "+request.getRemoteAddr());
					}
				}
			});
		}
		
	}
	
	private static void checkURL(HttpServletRequest request) { // npr: xss_r/?name=<script>alert(document.cookie)</script>
		String url = request.getRequestURL().toString();
		//System.out.println("URL: "+url);
		Pattern pattern = Pattern.compile("(?i)(?s)\\b(select)\\b(.*?)\\b(from)\\b|\\b(insert)\\b(.*?)\\b(into)\\b|\\b(update)\\b(.*?)\\b(set)\\b|\\b(group by)\\b|\\b(delete)(.*?)\\b(from)\\b");		
		Matcher matcher = pattern.matcher(url);
		if (matcher.find()) {
			LoggerAttacks.getLogger().log(Level.WARNING, "SQL injection attack in url '"+url+"' from address "+request.getRemoteAddr());
           flag = true;
        }
	}
	
	private static void checkQueryString(HttpServletRequest request) { // sve poslije upitnika
		String query = request.getQueryString();
		//System.out.println("QUERY STRING"+query); // treba da bude oblika: &?<parameterName>= // npr: &?<parameterName>=<script>%20alert(%27poruka%27)</script>
		if(query != null) {
			Matcher matcher = pattern.matcher(query);
			Pattern pattern = Pattern.compile("(?i)(?s)\\b(select)\\b(.*?)\\b(from)\\b|\\b(insert)\\b(.*?)\\b(into)\\b|\\b(update)\\b(.*?)\\b(set)\\b|\\b(group by)\\b|\\b(delete)(.*?)\\b(from)\\b");					
			if(matcher.find()) {
				LoggerAttacks.getLogger().log(Level.WARNING, "SQL injection attack in query string '"+query+"' from address: "+request.getRemoteAddr());
				flag = true;
			}
		}
	}
		
	private static void checkParameterNames(HttpServletRequest request) { // provjera za forme
		Enumeration<String> parameter = request.getParameterNames();
		while(parameter.hasMoreElements()) {
			String param = parameter.nextElement();
			if(request.getParameter(param) != null) {
				//System.out.println("SQLI PARAM: "+request.getParameter(param));
				Pattern pattern = Pattern.compile("(?i)(?s)\\b(select)\\b(.*?)\\b(from)\\b|\\b(insert)\\b(.*?)\\b(into)\\b|\\b(update)\\b(.*?)\\b(set)\\b|\\b(group by)\\b|\\b(delete)(.*?)\\b(from)\\b");
				//Pattern pattern = Pattern.compile(SQLI_KEYWORDS);
				Matcher matcher = pattern.matcher(request.getParameter(param));
				if(matcher.find()) {
					flag = true;
					LoggerAttacks.getLogger().log(Level.WARNING, "SQL injection attack in parameter '"+param+"' from address "+request.getRemoteAddr());
				}
			}
		}
	}

}